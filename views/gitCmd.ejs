<%- include("./partials/header") -%>

<div class="containerAndNav">
  <div class="container">
      <h1>Git commands :-</h1>
      <strong>This page is created just for storing all information at one place</strong>

      <p class="defBody" id="versionControl"><strong>Version Control </strong>Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time.</p>
      <ul class="gitCmds">
         <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git init</code>
             </div>
             <p>To initialize git in your project</p>
         </li>
         <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git status</code>
             </div>
             <p>To look into your staging area, it shows you untracked file in red color and tracked file in green color.<br><span style="color:gray">(The staging area is like a rough draft space, it's where you can git add the version of a file or multiple files that you want to save in your next commit (in other words in the next version of your project))</span> </p>
         </li>
        <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git add .</code>
             </div>
             <p>To add file to staging area, . is adding all untracked file to staging area or to add any specific file, write the name of file at the place of .</p>
         </li>
        <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git commit -m "your_message"</code>
             </div>
             <p>To commit a file</p>
         </li>
        <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git log</code>
             </div>
             <p>what you have commited</p>
         </li>
        <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git diff <i>filename</i></code>
             </div>
             <p>it will give you the differences between changed and last safe file.</p>
         </li>
        <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git remote add origin <i>https_address_of_your_repositry</i><br>git push -u origin master</code>
             </div>
             <p>to push your repositry on remote repositry. go to your gitHub account and click on plus icon at top right corner. And create a repositry with possible name. And then copy second line from there<br>origin is name of your remote</p>
         </li>
    </ul>
      <p id="gitignore"class="defBody"><strong>gitignore </strong> Specifies intentionally untracked files to ignore<br>A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; see the NOTES below for details.

      Each line in a gitignore file specifies a pattern. When deciding whether to ignore a path, Git normally checks gitignore patterns from multiple sources, with the following order of precedence, from highest to lowest (within one level of precedence, the last matching pattern decides toutcohe me):</p>
    <ul class="gitCmds">
          <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git rm -cached -r .</code>
             </div>
             <p>To remove all files from staging area</p>
         </li>
          <li>
             <div class="cmdBlock">
                <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
                <code id="1">git clone <i>link_of_that_remote_repositry</i></code>
             </div>
             <p>
                In a laymann language, cloning is copying all files from github to your machine<br>
                Please make sure that you location should be the same where you want to clone repositry. 
                For cloning a repositry from remote repositry(open source) to working directory, open it on gihub official website, there you find a <span style="background:rgb(117, 207, 117)">green</span> button.<br>Click it and copy the link for cloning and then open your terminal and execute the abouve command. </p>
         </li>
    </ul>
    <p class="defBody" id="branchingMerging"><strong>Branching and Merging </strong> Specifies intentionally untracked files to ignore<br>A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; see the NOTES below for details.

      Each line in a gitignore file specifies a pattern. When deciding whether to ignore a path, Git normally checks gitignore patterns from multiple sources, with the following order of precedence, from highest to lowest (within one level of precedence, the last matching pattern decides toutcohe me):</p>
    <ul class="gitCmds">
        <li>
            <div class="cmdBlock">
            <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
            <code id="1">git branch <i>your_branch_name</i></code>
            </div>
            <p>To create a new branch</p>
        </li>
        <li>
            <div class="cmdBlock">
            <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
            <code id="1">git branch </code>
            </div>
            <p>You will get the name of all branches. Here asterisk(*) show that on which branch you are.</p>
        </li>
        <li>
            <div class="cmdBlock">
            <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
            <code id="1">git checkout <i>brach_name</i> </code>
            </div>
            <p>To switch between braches</p>
        </li>
        <li>
            <div class="cmdBlock">
            <button onclick="copyToClipboard(this)" class="copyIcon"><i class="material-icons copyIcon" >attach_file</i></button>
            <code id="1">git merge <i>brach_name</i> </code>
            </div>
            <p>For merging the branch, go to master branch (git checkout master) and then type the above command in CLI and execute it with suitable branch name.<br>It will open a vim editor for writing a merge message, you may also leave it blank. Just type <b>:q!</b> and finally execute git push origin master -u</p>
        </li>
    </ul>
     <p class="defBody" id="forkingPull"><strong>Forking and Pull Requests </strong> Best thing to start work with other coders or to contribute to open source collaborations.This feature prohibits unknowns to change your code.<br>pull is called pull because owner is pulling code from his/her colleague remote repositry. Forking is just copying someones repositry under your github account. </p>
    <h4>Summary</h4>
    <div style="display:flex;">
   
      <div class="gitSummary">
      <img src="./images/sum.jpeg" alt="Overall Summary"/>
      </div>
      <a style="writing-mode: vertical-lr;
      background:#039be5;
      color:white;
      padding:2rem 0.5rem;
      align-self:center;
      border-radius:0.5rem;
      margin:0.5rem;
      "href="./images/sum.jpeg" download="gitCmds_Spider8019">Download</a>
    </div>
  </div>
  <ul class="innernavigationBar">
      <li style="font-weight:bold;">Topics</li>
      <li><a href="#versionControl">Version Control</a></li>
      <li><a href="#gitignore">Git ignore</a></li>
      <li><a href="#branchingMerging">Branching and Merging</a></li>
      <li><a href="#forkingPull">Forking and Pull Requests</a></li>
  </ul>
</div>

  <script>
      function copyToClipboard(THIS){
            var copyText=THIS.nextElementSibling;
            var inpEle=document.createElement("INPUT")
            inpEle.setAttribute("value",copyText.innerHTML);
            console.log(inpEle)
            inpEle.setSelectionRange(0, 99999);
            document.execCommand("copy");
            M.toast({html: `Copied: ${copyText.innerHTML}`})
      }
  </script>
</body>
</html>